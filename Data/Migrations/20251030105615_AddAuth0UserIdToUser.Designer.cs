// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SatOps.Data;

#nullable disable

namespace SatOps.Data.Migrations
{
    [DbContext(typeof(SatOpsDbContext))]
    [Migration("20251030105615_AddAuth0UserIdToUser")]
    partial class AddAuth0UserIdToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SatOps.Modules.FlightPlan.FlightPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Commands")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<int>("GroundStationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OverpassId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("SatelliteId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroundStationId");

                    b.HasIndex("OverpassId");

                    b.HasIndex("PreviousPlanId");

                    b.HasIndex("SatelliteId");

                    b.HasIndex("Status");

                    b.ToTable("flight_plans", (string)null);
                });

            modelBuilder.Entity("SatOps.Modules.Groundstation.GroundStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("ground_stations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKeyHash = "",
                            ApplicationId = new Guid("992c768c-4fec-427c-9aea-d7d4c08a34c2"),
                            CreatedAt = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1170),
                            Name = "Aarhus",
                            UpdatedAt = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1170)
                        });
                });

            modelBuilder.Entity("SatOps.Modules.Operation.ImageData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CaptureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("GroundStationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageWidth")
                        .HasColumnType("integer");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ReceivedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("S3ObjectPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SatelliteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaptureTime");

                    b.HasIndex("GroundStationId");

                    b.HasIndex("SatelliteId");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("image_data", (string)null);
                });

            modelBuilder.Entity("SatOps.Modules.Operation.TelemetryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FlightPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("GroundStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("S3ObjectPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SatelliteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlightPlanId");

                    b.HasIndex("GroundStationId");

                    b.HasIndex("SatelliteId", "GroundStationId", "Timestamp");

                    b.ToTable("telemetry_data", (string)null);
                });

            modelBuilder.Entity("SatOps.Modules.Overpass.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<double>("EndAzimuth")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroundStationId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxElevation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("MaxElevationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SatelliteId")
                        .HasColumnType("integer");

                    b.Property<double>("StartAzimuth")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TleLine1")
                        .HasColumnType("text");

                    b.Property<string>("TleLine2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TleUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroundStationId");

                    b.HasIndex("SatelliteId", "GroundStationId", "StartTime");

                    b.ToTable("overpasses", (string)null);
                });

            modelBuilder.Entity("SatOps.Modules.Satellite.Satellite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NoradId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TleLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TleLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NoradId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("satellites", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1290),
                            LastUpdate = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1290),
                            Name = "International Space Station (ISS)",
                            NoradId = 25544,
                            Status = 0,
                            TleLine1 = "1 25544U 98067A   23256.90616898  .00020137  00000-0  35438-3 0  9992",
                            TleLine2 = "2 25544  51.6416 339.0970 0003835  48.3825  73.2709 15.50030022414673"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1290),
                            LastUpdate = new DateTime(2025, 10, 30, 10, 56, 15, 707, DateTimeKind.Utc).AddTicks(1290),
                            Name = "SENTINEL-2C",
                            NoradId = 60989,
                            Status = 0,
                            TleLine1 = "1 60989U 24157A   25270.79510520  .00000303  00000-0  13232-3 0  9996",
                            TleLine2 = "2 60989  98.5675 344.4033 0001006  86.9003 273.2295 14.30815465 55465"
                        });
                });

            modelBuilder.Entity("SatOps.Modules.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AdditionalRoles")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("AdditionalScopes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Auth0UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalRoles = new List<string>(),
                            AdditionalScopes = new List<string>(),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            Name = "Admin User",
                            PasswordHash = "$2a$11$N3CMfWFaZG7H.fuavEvLRuejsgLY25wYJXHMVFBxgxZvgiR4zha/.",
                            Role = 2,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("SatOps.Modules.FlightPlan.FlightPlan", b =>
                {
                    b.HasOne("SatOps.Modules.User.User", "ApprovedBy")
                        .WithMany("ApprovedFlightPlans")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SatOps.Modules.User.User", "CreatedBy")
                        .WithMany("CreatedFlightPlans")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Groundstation.GroundStation", "GroundStation")
                        .WithMany("FlightPlans")
                        .HasForeignKey("GroundStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Overpass.Entity", "Overpass")
                        .WithMany()
                        .HasForeignKey("OverpassId");

                    b.HasOne("SatOps.Modules.FlightPlan.FlightPlan", "PreviousPlan")
                        .WithMany()
                        .HasForeignKey("PreviousPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SatOps.Modules.Satellite.Satellite", "Satellite")
                        .WithMany("FlightPlans")
                        .HasForeignKey("SatelliteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("GroundStation");

                    b.Navigation("Overpass");

                    b.Navigation("PreviousPlan");

                    b.Navigation("Satellite");
                });

            modelBuilder.Entity("SatOps.Modules.Groundstation.GroundStation", b =>
                {
                    b.OwnsOne("SatOps.Modules.Groundstation.Location", "Location", b1 =>
                        {
                            b1.Property<int>("GroundStationId")
                                .HasColumnType("integer");

                            b1.Property<double>("Altitude")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("double precision")
                                .HasDefaultValue(0.0)
                                .HasColumnName("altitude");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("longitude");

                            b1.HasKey("GroundStationId");

                            b1.ToTable("ground_stations");

                            b1.WithOwner()
                                .HasForeignKey("GroundStationId");

                            b1.HasData(
                                new
                                {
                                    GroundStationId = 1,
                                    Altitude = 62.0,
                                    Latitude = 56.171972897990663,
                                    Longitude = 10.191659216036516
                                });
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("SatOps.Modules.Operation.ImageData", b =>
                {
                    b.HasOne("SatOps.Modules.Groundstation.GroundStation", "GroundStation")
                        .WithMany("Images")
                        .HasForeignKey("GroundStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Satellite.Satellite", "Satellite")
                        .WithMany("Images")
                        .HasForeignKey("SatelliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroundStation");

                    b.Navigation("Satellite");
                });

            modelBuilder.Entity("SatOps.Modules.Operation.TelemetryData", b =>
                {
                    b.HasOne("SatOps.Modules.FlightPlan.FlightPlan", "FlightPlan")
                        .WithMany()
                        .HasForeignKey("FlightPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Groundstation.GroundStation", "GroundStation")
                        .WithMany("Telemetry")
                        .HasForeignKey("GroundStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Satellite.Satellite", "Satellite")
                        .WithMany("Telemetry")
                        .HasForeignKey("SatelliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightPlan");

                    b.Navigation("GroundStation");

                    b.Navigation("Satellite");
                });

            modelBuilder.Entity("SatOps.Modules.Overpass.Entity", b =>
                {
                    b.HasOne("SatOps.Modules.Groundstation.GroundStation", "GroundStation")
                        .WithMany("Overpasses")
                        .HasForeignKey("GroundStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatOps.Modules.Satellite.Satellite", "Satellite")
                        .WithMany("Overpasses")
                        .HasForeignKey("SatelliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroundStation");

                    b.Navigation("Satellite");
                });

            modelBuilder.Entity("SatOps.Modules.Groundstation.GroundStation", b =>
                {
                    b.Navigation("FlightPlans");

                    b.Navigation("Images");

                    b.Navigation("Overpasses");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("SatOps.Modules.Satellite.Satellite", b =>
                {
                    b.Navigation("FlightPlans");

                    b.Navigation("Images");

                    b.Navigation("Overpasses");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("SatOps.Modules.User.User", b =>
                {
                    b.Navigation("ApprovedFlightPlans");

                    b.Navigation("CreatedFlightPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
